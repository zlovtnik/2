syntax = "proto3";

package user_stats;

// Service for user statistics operations
service UserStatsService {
    // Get current user statistics using JWT token authentication
    rpc GetCurrentUserStats(GetCurrentUserStatsRequest) returns (GetCurrentUserStatsResponse);
    
    // Health check endpoint for connection pool monitoring
    rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
    
    // Get connection pool metrics
    rpc GetConnectionPoolMetrics(GetConnectionPoolMetricsRequest) returns (GetConnectionPoolMetricsResponse);
}

// Request message for getting current user stats
// The JWT token will be passed via gRPC metadata (Authorization header)
message GetCurrentUserStatsRequest {
    // Empty request body - user ID will be extracted from JWT token
}

// Response message containing user information with statistics
message GetCurrentUserStatsResponse {
    string user_id = 1;
    string email = 2;
    string full_name = 3;
    optional string preferences = 4;  // JSON string, optional
    string created_at = 5;  // ISO 8601 timestamp
    string updated_at = 6;  // ISO 8601 timestamp
    int64 refresh_token_count = 7;
    optional string last_login = 8;  // ISO 8601 timestamp, optional
}

message AuthError {
    string message = 1;
    string code = 2;
}

message UserNotFoundError {
    string message = 1;
    string user_id = 2;
}

message HealthCheckRequest {
    // Empty request body
}

message HealthCheckResponse {
    string status = 1;  // "healthy", "unhealthy", "degraded"
    string message = 2;
    int64 timestamp = 3;  // Unix timestamp
}

message GetConnectionPoolMetricsRequest {
    // Empty request body
}

message GetConnectionPoolMetricsResponse {
    int32 total_connections = 1;
    int32 active_connections = 2;
    int32 available_connections = 3;
    int64 connection_errors = 4;
    int64 health_check_failures = 5;
    optional int64 last_health_check_timestamp = 6;  // Unix timestamp
}